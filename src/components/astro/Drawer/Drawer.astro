---
export interface Props {
  isDismissable?: boolean
  position?: 'right' | 'left' | 'top' | 'bottom'
  effect?: 'opaque' | 'blur' | 'transparent'
  size?: 'sm' | 'md' | 'lg' | 'xl' | 'full'
  color?: 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'danger'
  labelledBy?: string
  describedBy?: string
  id?: string
}

const {
  isDismissable = true,
  position = 'right',
  effect = 'opaque',
  size = 'md',
  color = 'default',
  labelledBy,
  describedBy,
  id = `drawer-${Math.random().toString(36).slice(2, 9)}`
} = Astro.props

const colorClasses = {
  default: 'bg-neutral-100/20 dark:bg-zinc-700/30 dark:shadow-zinc-700/10',
  primary: 'bg-blue-500/20',
  secondary: 'bg-indigo-500/20',
  success: 'bg-green-500/20',
  warning: 'bg-yellow-500/20 dark:bg-yellow-500/20',
  danger: 'bg-red-500/20'
}

const textColorClasses = {
  default: `${effect === 'opaque' ? 'text-gray-200' : 'text-gray-800'} dark:text-gray-300`,
  primary: 'text-blue-400 dark:text-blue-500',
  secondary: 'text-indigo-400 dark:text-indigo-500',
  success: 'text-green-400 dark:text-green-500',
  warning: 'text-yellow-400 dark:text-yellow-500',
  danger: 'text-red-400 dark:text-red-500'
}

const backdropEffects = {
  opaque: 'bg-black/50',
  blur: 'backdrop-blur-sm',
  transparent: 'bg-transparent'
}

const sizeClasses = {
  w: {
    sm: 'w-1/4',
    md: 'w-1/3',
    lg: 'w-1/2',
    xl: 'w-3/4',
    full: 'w-full'
  },
  h: {
    sm: 'h-1/4',
    md: 'h-1/3',
    lg: 'h-1/2',
    xl: 'h-3/4',
    full: 'h-full'
  }
}

const positionClasses = {
  top: 'top-0 left-0 right-0 w-full',
  bottom: 'bottom-0 left-0 right-0 w-full',
  left: 'left-0 top-0 bottom-0 h-full',
  right: 'right-0 top-0 bottom-0 h-full'
}
---

<div
  id={id}
  class='drawer fixed inset-0 z-50 hidden'
  role='dialog'
  aria-modal='true'
  aria-labelledby={labelledBy}
  aria-describedby={describedBy}
  data-dismissable={isDismissable}
>
  <div
    class={`drawer-backdrop fixed inset-0 ${backdropEffects[effect]}`}
    aria-hidden='true'
  >
  </div>
  <div
    class={`border-0 shadow-lg backdrop-blur-sm ${positionClasses[position]} ${
      ['top', 'bottom'].includes(position)
        ? sizeClasses.h[size]
        : sizeClasses.w[size]
    } ${colorClasses[color]} fixed ${textColorClasses[color]}`}
  >
    <div class='flex flex-col h-full'>
      <slot />
    </div>
  </div>
</div>

<script is:inline define:vars={{ id }}>
  document.addEventListener('DOMContentLoaded', () => {
    const drawerId = id
    const drawer = document.getElementById(drawerId)
    if (!drawer) return

    window.drawerInstances = window.drawerInstances || {}
    let lastFocusedElement = null
    const isDismissable = drawer.dataset.dismissable === 'true'

    const handleEscape = (e) => {
      if (e.key === 'Escape' && !drawer.classList.contains('hidden')) {
        window.drawerInstances[drawerId].close()
      }
    }

    const handleClickOutside = (e) => {
      if (!isDismissable || drawer.classList.contains('hidden')) return

      const isBackdrop = e.target === drawer.firstElementChild
      const isOutside = !drawer.contains(e.target)

      if (isBackdrop || isOutside) {
        window.drawerInstances[drawerId].close()
      }
    }

    const toggleDrawer = (open) => {
      if (open) {
        lastFocusedElement = document.activeElement
        drawer.classList.remove('hidden')
        document.body.style.overflow = 'hidden'
        drawer.focus()

        if (isDismissable) {
          document.addEventListener('keydown', handleEscape)
          document.addEventListener('click', handleClickOutside)
        }
      } else {
        document.body.style.overflow = 'auto'
        drawer.classList.add('hidden')
        lastFocusedElement?.focus()

        document.removeEventListener('keydown', handleEscape)
        document.removeEventListener('click', handleClickOutside)
      }
    }

    window.drawerInstances[drawerId] = {
      open: () => toggleDrawer(true),
      close: () => toggleDrawer(false)
    }

    drawer.addEventListener('astro:unmount', () => {
      document.removeEventListener('keydown', handleEscape)
      document.removeEventListener('click', handleClickOutside)
      delete window.drawerInstances[drawerId]
    })
  })
</script>
