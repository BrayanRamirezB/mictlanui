---
import Checkbox from './Checkbox.astro'

interface CheckboxItem {
  id: string
  label: string
  variant?: 'default' | 'bordered' | 'light'
  color?: 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'danger'
  size?: 'sm' | 'md' | 'lg' | 'xl'
  rounded?: 'none' | 'sm' | 'md' | 'lg' | 'full'
  checked?: boolean
  disabled?: boolean
}

interface CheckboxGroupProps {
  title?: string
  checkboxes: CheckboxItem[]
  variant?: 'default' | 'bordered' | 'light'
  color?: 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'danger'
  size?: 'sm' | 'md' | 'lg' | 'xl'
  rounded?: 'none' | 'sm' | 'md' | 'lg' | 'full'
  orientation?: 'horizontal' | 'vertical'
}

const {
  title = '',
  checkboxes = [],
  variant = 'default',
  color = 'default',
  size = 'md',
  rounded = 'md',
  orientation = 'horizontal'
} = Astro.props as CheckboxGroupProps

// Generar ID Ãºnico
const generateId = (prefix: string) => {
  const random = crypto.getRandomValues(new Uint32Array(1))[0].toString(36)
  return `${prefix}-${random}`
}

// Configuraciones de estilo
const variants = {
  default: 'border-0 shadow-lg backdrop-blur-sm',
  bordered: 'border shadow-md',
  light: ''
}

const colors = {
  default: 'bg-neutral-100/20 dark:bg-zinc-700/30 dark:shadow-zinc-700/10',
  primary: 'bg-blue-500/20',
  secondary: 'bg-indigo-500/20',
  success: 'bg-green-500/30',
  warning: 'bg-yellow-500/40 dark:bg-yellow-500/20',
  danger: 'bg-red-500/20'
}

const textColors = {
  default: 'text-gray-800 dark:text-gray-300',
  primary: 'text-blue-800 dark:text-blue-500',
  secondary: 'text-indigo-800 dark:text-indigo-500',
  success: 'text-green-800 dark:text-green-500',
  warning: 'text-yellow-800 dark:text-yellow-500',
  danger: 'text-red-800 dark:text-red-500'
}

const borderColors = {
  default: 'border-gray-800 dark:border-gray-300',
  primary: 'border-blue-800 dark:border-blue-500',
  secondary: 'border-indigo-800 dark:border-indigo-500',
  success: 'border-green-800 dark:border-green-500',
  warning: 'border-yellow-800 dark:border-yellow-500',
  danger: 'border-red-800 dark:border-red-500'
}

const sizes = {
  sm: 'px-3 py-2 text-xs',
  md: 'px-4 py-2.5 text-sm',
  lg: 'px-5 py-3 text-base',
  xl: 'px-6 py-3.5 text-lg'
}

const roundeds = {
  none: 'rounded-none',
  sm: 'rounded-sm',
  md: 'rounded-md',
  lg: 'rounded-lg',
  full: 'rounded-full'
}

// Generar IDs
const groupId = title
  ? generateId(title.replace(/\s+/g, '-').toLowerCase())
  : undefined
const checkboxGroupId = generateId('checkbox-group')

// Contenido del script
const scriptContent = `
  (function() {
    const group = document.getElementById('${checkboxGroupId}');
    if (group) {
      group.addEventListener('change', (e) => {
        if (e.target.type === 'checkbox') {
          const checkboxes = [...group.querySelectorAll('input[type="checkbox"]')]
            .map(input => ({
              id: input.id,
              checked: input.checked
            }));
          
          const event = new CustomEvent('checkbox-change', {
            detail: checkboxes,
            bubbles: true,
            composed: true
          });
          group.dispatchEvent(event);
        }
      });
    }
  })();
`
---

<div
  class={`flex flex-col gap-2 ${variants[variant]} ${sizes[size]} ${
    variant === 'default' && colors[color]
  } ${variant === 'bordered' && borderColors[color]} ${textColors[color]} ${
    variant !== 'light' && roundeds[rounded]
  }`}
  role='group'
  aria-labelledby={groupId}
>
  {
    title && (
      <h3 id={groupId} class='text-lg font-semibold'>
        {title}
      </h3>
    )
  }

  <div
    class={`flex gap-2 ${orientation === 'vertical' ? 'flex-col' : 'flex-row'}`}
    id={checkboxGroupId}
  >
    {
      checkboxes.map(({ id, label, checked = false, disabled = false }) => {
        const uniqueId = `${checkboxGroupId}-${id}`
        return (
          <Checkbox
            id={uniqueId}
            label={label}
            checked={checked}
            disabled={disabled}
            variant='light'
            color={color}
            size={size}
            rounded={rounded}
          />
        )
      })
    }
  </div>
</div>

<script is:inline set:html={scriptContent} />
