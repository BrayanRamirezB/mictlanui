---
interface TooltipProps {
  content: string
  color?: 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'danger'
  rounded?: 'none' | 'sm' | 'md' | 'lg' | 'full'
  placement?: 'top' | 'bottom' | 'left' | 'right'
  isDisabled?: boolean
  delay?: number
}

const {
  content,
  color = 'default',
  rounded = 'md',
  placement = 'top',
  isDisabled = false,
  delay = 300
} = Astro.props as TooltipProps

const tooltipId = crypto.randomUUID()

const positions = {
  top: 'bottom-full left-1/2 transform -translate-x-1/2 mb-2',
  bottom: 'top-full left-1/2 transform -translate-y-1/2 mt-2',
  left: 'right-full top-1/2 transform -translate-y-1/2 mr-2',
  right: 'left-full top-1/2 transform -translate-y-1/2 ml-2'
}

const roundeds = {
  none: 'rounded-none',
  sm: 'rounded-sm',
  md: 'rounded-md',
  lg: 'rounded-lg',
  full: 'rounded-full'
}

const colors = {
  default: 'bg-neutral-100/20 dark:bg-zinc-700/30 dark:shadow-zinc-700/10',
  primary: 'bg-blue-500/20',
  secondary: 'bg-indigo-500/20',
  success: 'bg-green-500/30',
  warning: 'bg-yellow-500/40 dark:bg-yellow-500/20',
  danger: 'bg-red-500/20'
}

const textColors = {
  default: 'text-gray-800 dark:text-gray-300',
  primary: 'text-blue-800 dark:text-blue-500',
  secondary: 'text-indigo-800 dark:text-indigo-500',
  success: 'text-green-800 dark:text-green-500',
  warning: 'text-yellow-800 dark:text-yellow-500',
  danger: 'text-red-800 dark:text-red-500'
}

const positionClass = positions[placement]
const roundedClass = roundeds[rounded]
const colorClass = colors[color]
const textColorClass = textColors[color]
---

<div
  class='relative flex items-center'
  id={`tooltip-${tooltipId}`}
  data-delay={delay}
  data-disabled={isDisabled}
  aria-describedby={`tooltip-content-${tooltipId}`}
>
  <div
    id={`tooltip-content-${tooltipId}`}
    role='tooltip'
    class={`absolute z-9999 border-0 shadow-md backdrop-blur-sm ${positionClass} ${roundedClass} ${colorClass} ${textColorClass} whitespace-nowrap text-sm px-3 py-1 invisible transition-opacity`}
    aria-hidden='true'
  >
    {content}
  </div>
  <slot />
</div>

<script define:vars={{ clientTooltipId: tooltipId }} is:inline>
  ;(() => {
    const wrapperId = `tooltip-${clientTooltipId}`
    const contentId = `tooltip-content-${clientTooltipId}`

    const tooltipWrapper = document.getElementById(wrapperId)

    if (!tooltipWrapper) {
      return
    }

    const isDisabled = tooltipWrapper.dataset.disabled === 'true'
    const delay = Number(tooltipWrapper.dataset.delay)
    let timeout

    if (isDisabled) return

    const showTooltip = () => {
      const tooltipContent = tooltipWrapper.querySelector(`#${contentId}`)
      if (tooltipContent) {
        tooltipContent.classList.remove('invisible')
        tooltipContent.setAttribute('aria-hidden', 'false')
      } else {
        console.error(
          `Tooltip content with selector '#${contentId}' not found within wrapper.`
        )
      }
    }

    const hideTooltip = () => {
      const tooltipContent = tooltipWrapper.querySelector(`#${contentId}`)
      if (tooltipContent) {
        tooltipContent.classList.add('invisible')
        tooltipContent.setAttribute('aria-hidden', 'true')
      } else {
        console.error(
          `Tooltip content with selector '#${contentId}' not found within wrapper.`
        )
      }
    }

    tooltipWrapper.addEventListener('mouseenter', () => {
      timeout = setTimeout(showTooltip, delay)
    })

    tooltipWrapper.addEventListener('mouseleave', () => {
      clearTimeout(timeout)
      hideTooltip()
    })

    tooltipWrapper.addEventListener('click', (event) => {
      event.stopPropagation()
      if (window.innerWidth < 1024) {
        showTooltip()
        setTimeout(hideTooltip, 2000)
      }
    })
  })()
</script>
