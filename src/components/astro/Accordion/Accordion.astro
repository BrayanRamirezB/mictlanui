---
interface Props {
  items: Array<Item>
  multiple?: boolean
  styleVariant?: 'default' | 'light' | 'bordered' | 'complete'
  color?: 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'danger'
  accordionId?: string
}

interface Item {
  title: string
  subtitle?: string
  content: string
}

const {
  items,
  multiple = false,
  styleVariant = 'default',
  color = 'default',
  accordionId = `accordion-${Math.random().toString(36).slice(2, 11)}`
} = Astro.props

const variants = {
  default: 'border-0 shadow-lg backdrop-blur-md',
  light: 'border-b-2',
  bordered: 'border rounded-sm',
  complete: 'border backdrop-blur-sm shadow-lg'
}

const bodyVariants = {
  default: 'backdrop-blur-md',
  light: 'bg-transparent dark:bg-transparent',
  bordered: 'border-x-[1px]',
  complete: 'backdrop-blur-sm border-x-[1px]'
}

const colors = {
  default: 'bg-neutral-100/20 dark:bg-zinc-700/30 dark:shadow-neutral-100/5',
  primary: 'bg-blue-500/40 dark:shadow-blue-500/20',
  secondary: 'bg-indigo-500/40 dark:shadow-indigo-500/20',
  success: 'bg-green-400/50 dark:shadow-green-500/20',
  warning: 'bg-yellow-500/40 dark:shadow-yellow-500/20',
  danger: 'bg-red-500/40 dark:shadow-red-500/20'
}

const hoverColors = {
  default: 'hover:bg-white/50 dark:hover:bg-zinc-800',
  primary: 'hover:bg-blue-500/30 dark:hover:bg-blue-500/10',
  secondary: 'hover:bg-indigo-500/30 dark:hover:bg-indigo-500/20',
  success: 'hover:bg-green-500/60 dark:hover:bg-green-500/30',
  warning: 'hover:bg-yellow-500/60 dark:hover:bg-yellow-500/30',
  danger: 'hover:bg-red-500/30 dark:hover:bg-red-500/10'
}

const borderColors = {
  default: 'border-zinc-700/20 dark:border-neutral-100/30',
  primary: 'border-blue-800 dark:border-blue-500',
  secondary: 'border-indigo-800 dark:border-indigo-500',
  success: 'border-green-800 dark:border-green-500',
  warning: 'border-yellow-800 dark:border-yellow-500',
  danger: 'border-red-800 dark:border-red-500'
}

const variantClass = variants[styleVariant]
const bodyVariantClass = bodyVariants[styleVariant]
const colorClass =
  styleVariant !== 'light' && styleVariant !== 'bordered' ? colors[color] : ''
const borderColorClass = styleVariant !== 'default' ? borderColors[color] : ''
const hoverColorClass = hoverColors[color]

const scriptContent = `
(() => {
  const accordion = document.getElementById('${accordionId}');
  if (!accordion) return;
  
  const multiple = ${multiple};
  
  const toggleAccordion = (button) => {
    const contentId = button.getAttribute('aria-controls');
    const content = document.getElementById(contentId);
    const isActive = content.style.maxHeight !== '0px';
    const icon = button.querySelector('[data-accordion-icon]');

    if (!multiple) {
      const allButtons = accordion.querySelectorAll('[data-accordion-button]');
      allButtons.forEach(otherButton => {
        if (otherButton !== button) {
          const otherContent = document.getElementById(otherButton.getAttribute('aria-controls'));
          const otherIcon = otherButton.querySelector('[data-accordion-icon]');
          otherContent.style.maxHeight = '0px';
          otherIcon.classList.remove('rotate-180');
          otherButton.setAttribute('aria-expanded', 'false');
        }
      });
    }

    content.style.maxHeight = isActive ? '0px' : content.scrollHeight + 'px';
    icon.classList.toggle('rotate-180', !isActive);
    button.setAttribute('aria-expanded', String(!isActive));
  };

  accordion.querySelectorAll('[data-accordion-button]').forEach(button => {
    button.addEventListener('click', () => toggleAccordion(button));
    
    // Inicializar estado
    const content = document.getElementById(button.getAttribute('aria-controls'));
    content.style.maxHeight = button.getAttribute('aria-expanded') === 'true' 
      ? content.scrollHeight + 'px' 
      : '0px';
  });
})();
`
---

<div
  id={accordionId}
  class='w-full'
  role='tablist'
  aria-multiselectable={multiple}
>
  {
    items.map((item, index) => (
      <div role='region' aria-labelledby={`${accordionId}-heading-${index}`}>
        <h2 id={`${accordionId}-heading-${index}`}>
          <button
            type='button'
            class={`flex items-center justify-between w-full py-2 px-3 font-medium gap-3 transition duration-300 text-zinc-800 dark:text-neutral-100 ${variantClass} ${colorClass} ${borderColorClass} ${hoverColorClass}`}
            aria-expanded='false'
            aria-controls={`${accordionId}-body-${index}`}
            data-accordion-button
          >
            <div class='w-full max-w-full'>
              <span class='flex justify-start items-center max-w-full'>
                {item.title}
              </span>
              {item.subtitle && (
                <p class='text-left text-sm font-light text-zinc-700 dark:text-neutral-200'>
                  {item.subtitle}
                </p>
              )}
            </div>
            <svg
              data-accordion-icon
              class='w-3 h-3 shrink-0 transition duration-300 ease-in'
              aria-hidden='true'
              xmlns='http://www.w3.org/2000/svg'
              fill='none'
              viewBox='0 0 10 6'
            >
              <path
                stroke='currentColor'
                stroke-linecap='round'
                stroke-linejoin='round'
                stroke-width='2'
                d='M9 5 5 1 1 5'
              />
            </svg>
          </button>
        </h2>
        <div
          id={`${accordionId}-body-${index}`}
          class={`overflow-hidden transition-all duration-300 ease-in-out ${bodyVariantClass} ${colorClass} ${borderColorClass}`}
          style='max-height: 0px'
        >
          <div class='p-5'>
            <p class='mb-2 text-zinc-700/70 dark:text-neutral-100/70'>
              {item.content}
            </p>
          </div>
        </div>
      </div>
    ))
  }
</div>

<script is:inline set:html={scriptContent} />
